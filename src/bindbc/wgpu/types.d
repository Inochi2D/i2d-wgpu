/*
Copyright (c) 2019-2022 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.wgpu.types;

import core.stdc.stdint;

/*
 * Type definitions from webgpu.h
 */

enum ulong WGPU_ARRAY_LAYER_COUNT_UNDEFINED = 0xffffffffUL;
enum ulong WGPU_COPY_STRIDE_UNDEFINED = 0xffffffffUL;
enum ulong WGPU_LIMIT_U32_UNDEFINED = 0xffffffffUL;
enum ulong WGPU_LIMIT_U64_UNDEFINED = 0xffffffffffffffffUL;
enum ulong WGPU_MIP_LEVEL_COUNT_UNDEFINED = 0xffffffffUL;
enum ulong WGPU_WHOLE_MAP_SIZE = SIZE_MAX;
enum ulong WGPU_WHOLE_SIZE = 0xffffffffffffffffUL;

alias WGPUFlags = uint;

alias WGPUAdapter = void*;
alias WGPUBindGroup = void*;
alias WGPUBindGroupLayout = void*;
alias WGPUBuffer = void*;
alias WGPUCommandBuffer = void*;
alias WGPUCommandEncoder = void*;
alias WGPUComputePassEncoder = void*;
alias WGPUComputePipeline = void*;
alias WGPUDevice = void*;
alias WGPUInstance = void*;
alias WGPUPipelineLayout = void*;
alias WGPUQuerySet = void*;
alias WGPUQueue = void*;
alias WGPURenderBundle = void*;
alias WGPURenderBundleEncoder = void*;
alias WGPURenderPassEncoder = void*;
alias WGPURenderPipeline = void*;
alias WGPUSampler = void*;
alias WGPUShaderModule = void*;
alias WGPUSurface = void*;
alias WGPUSwapChain = void*;
alias WGPUTexture = void*;
alias WGPUTextureView = void*;

enum WGPUAdapterType
{
    DiscreteGPU = 0x00000000,
    IntegratedGPU = 0x00000001,
    CPU = 0x00000002,
    Unknown = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUAddressMode
{
    Repeat = 0x00000000,
    MirrorRepeat = 0x00000001,
    ClampToEdge = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUBackendType
{
    Null = 0x00000000,
    WebGPU = 0x00000001,
    D3D11 = 0x00000002,
    D3D12 = 0x00000003,
    Metal = 0x00000004,
    Vulkan = 0x00000005,
    OpenGL = 0x00000006,
    OpenGLES = 0x00000007,
    Force32 = 0x7FFFFFFF
}

enum WGPUBlendFactor
{
    Zero = 0x00000000,
    One = 0x00000001,
    Src = 0x00000002,
    OneMinusSrc = 0x00000003,
    SrcAlpha = 0x00000004,
    OneMinusSrcAlpha = 0x00000005,
    Dst = 0x00000006,
    OneMinusDst = 0x00000007,
    DstAlpha = 0x00000008,
    OneMinusDstAlpha = 0x00000009,
    SrcAlphaSaturated = 0x0000000A,
    Constant = 0x0000000B,
    OneMinusConstant = 0x0000000C,
    Force32 = 0x7FFFFFFF
}

enum WGPUBlendOperation
{
    Add = 0x00000000,
    Subtract = 0x00000001,
    ReverseSubtract = 0x00000002,
    Min = 0x00000003,
    Max = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUBufferBindingType
{
    Undefined = 0x00000000,
    Uniform = 0x00000001,
    Storage = 0x00000002,
    ReadOnlyStorage = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUBufferMapAsyncStatus
{
    Success = 0x00000000,
    Error = 0x00000001,
    Unknown = 0x00000002,
    DeviceLost = 0x00000003,
    DestroyedBeforeCallback = 0x00000004,
    UnmappedBeforeCallback = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUBufferMapState {
    Unmapped = 0x00000000,
    Pending = 0x00000001,
    Mapped = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUCompareFunction
{
    Undefined = 0x00000000,
    Never = 0x00000001,
    Less = 0x00000002,
    LessEqual = 0x00000003,
    Greater = 0x00000004,
    GreaterEqual = 0x00000005,
    Equal = 0x00000006,
    NotEqual = 0x00000007,
    Always = 0x00000008,
    Force32 = 0x7FFFFFFF
}

enum WGPUCompilationInfoRequestStatus
{
    Success = 0x00000000,
    Error = 0x00000001,
    DeviceLost = 0x00000002,
    Unknown = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUCompilationMessageType
{
    Error = 0x00000000,
    Warning = 0x00000001,
    Info = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUComputePassTimestampLocation
{
    Beginning = 0x00000000,
    End = 0x00000001,
    Force32 = 0x7FFFFFFF
}

enum WGPUCreatePipelineAsyncStatus
{
    Success = 0x00000000,
    ValidationError = 0x00000001,
    InternalError = 0x00000002,
    DeviceLost = 0x00000003,
    DeviceDestroyed = 0x00000004,
    Unknown = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUCullMode
{
    None = 0x00000000,
    Front = 0x00000001,
    Back = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUDeviceLostReason
{
    Undefined = 0x00000000,
    Destroyed = 0x00000001,
    Force32 = 0x7FFFFFFF
}

enum WGPUErrorFilter
{
    Validation = 0x00000000,
    OutOfMemory = 0x00000001,
    Internal = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUErrorType
{
    NoError = 0x00000000,
    Validation = 0x00000001,
    OutOfMemory = 0x00000002,
    Internal = 0x00000003,
    Unknown = 0x00000004,
    DeviceLost = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUFeatureName
{
    Undefined = 0x00000000,
    DepthClipControl = 0x00000001,
    Depth32FloatStencil8 = 0x00000002,
    TimestampQuery = 0x00000003,
    PipelineStatisticsQuery = 0x00000004,
    TextureCompressionBC = 0x00000005,
    TextureCompressionETC2 = 0x00000006,
    TextureCompressionASTC = 0x00000007,
    IndirectFirstInstance = 0x00000008,
    ShaderF16 = 0x00000009,
    RG11B10UfloatRenderable = 0x0000000A,
    BGRA8UnormStorage = 0x0000000B,
    Force32 = 0x7FFFFFFF
}

enum WGPUFilterMode
{
    Nearest = 0x00000000,
    Linear = 0x00000001,
    Force32 = 0x7FFFFFFF
}

enum WGPUFrontFace
{
    CCW = 0x00000000,
    CW = 0x00000001,
    Force32 = 0x7FFFFFFF
}

enum WGPUIndexFormat
{
    Undefined = 0x00000000,
    Uint16 = 0x00000001,
    Uint32 = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPULoadOp
{
    Undefined = 0x00000000,
    Clear = 0x00000001,
    Load = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUMipmapFilterMode
{
    Nearest = 0x00000000,
    Linear = 0x00000001,
    Force32 = 0x7FFFFFFF
}

enum WGPUPipelineStatisticName
{
    VertexShaderInvocations = 0x00000000,
    ClipperInvocations = 0x00000001,
    ClipperPrimitivesOut = 0x00000002,
    FragmentShaderInvocations = 0x00000003,
    ComputeShaderInvocations = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUPowerPreference
{
    Undefined = 0x00000000,
    LowPower = 0x00000001,
    HighPerformance = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUPredefinedColorSpace
{
    Undefined = 0x00000000,
    Srgb = 0x00000001,
    Force32 = 0x7FFFFFFF
}

enum WGPUPresentMode
{
    Immediate = 0x00000000,
    Mailbox = 0x00000001,
    Fifo = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUPrimitiveTopology
{
    PointList = 0x00000000,
    LineList = 0x00000001,
    LineStrip = 0x00000002,
    TriangleList = 0x00000003,
    TriangleStrip = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUQueryType
{
    Occlusion = 0x00000000,
    PipelineStatistics = 0x00000001,
    Timestamp = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUQueueWorkDoneStatus
{
    Success = 0x00000000,
    Error = 0x00000001,
    Unknown = 0x00000002,
    DeviceLost = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPURenderPassTimestampLocation
{
    Beginning = 0x00000000,
    End = 0x00000001,
    Force32 = 0x7FFFFFFF
}

enum WGPURequestAdapterStatus
{
    Success = 0x00000000,
    Unavailable = 0x00000001,
    Error = 0x00000002,
    Unknown = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPURequestDeviceStatus
{
    Success = 0x00000000,
    Error = 0x00000001,
    Unknown = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUSType
{
    Invalid = 0x00000000,
    SurfaceDescriptorFromMetalLayer = 0x00000001,
    SurfaceDescriptorFromWindowsHWND = 0x00000002,
    SurfaceDescriptorFromXlibWindow = 0x00000003,
    SurfaceDescriptorFromCanvasHTMLSelector = 0x00000004,
    ShaderModuleSPIRVDescriptor = 0x00000005,
    ShaderModuleWGSLDescriptor = 0x00000006,
    PrimitiveDepthClipControl = 0x00000007,
    SurfaceDescriptorFromWaylandSurface = 0x00000008,
    SurfaceDescriptorFromAndroidNativeWindow = 0x00000009,
    SurfaceDescriptorFromXcbWindow = 0x0000000A,
    RenderPassDescriptorMaxDrawCount = 0x0000000F,
    Force32 = 0x7FFFFFFF
}

enum WGPUSamplerBindingType
{
    Undefined = 0x00000000,
    Filtering = 0x00000001,
    NonFiltering = 0x00000002,
    Comparison = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUStencilOperation
{
    Keep = 0x00000000,
    Zero = 0x00000001,
    Replace = 0x00000002,
    Invert = 0x00000003,
    IncrementClamp = 0x00000004,
    DecrementClamp = 0x00000005,
    IncrementWrap = 0x00000006,
    DecrementWrap = 0x00000007,
    Force32 = 0x7FFFFFFF
}

enum WGPUStorageTextureAccess
{
    Undefined = 0x00000000,
    WriteOnly = 0x00000001,
    Force32 = 0x7FFFFFFF
}

enum WGPUStoreOp
{
    Undefined = 0x00000000,
    Store = 0x00000001,
    Discard = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureAspect
{
    All = 0x00000000,
    StencilOnly = 0x00000001,
    DepthOnly = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureComponentType
{
    Float = 0x00000000,
    Sint = 0x00000001,
    Uint = 0x00000002,
    DepthComparison = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureDimension
{
    D1 = 0x00000000,
    D2 = 0x00000001,
    D3 = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureFormat
{
    Undefined = 0x00000000,
    R8Unorm = 0x00000001,
    R8Snorm = 0x00000002,
    R8Uint = 0x00000003,
    R8Sint = 0x00000004,
    R16Uint = 0x00000005,
    R16Sint = 0x00000006,
    R16Float = 0x00000007,
    RG8Unorm = 0x00000008,
    RG8Snorm = 0x00000009,
    RG8Uint = 0x0000000A,
    RG8Sint = 0x0000000B,
    R32Float = 0x0000000C,
    R32Uint = 0x0000000D,
    R32Sint = 0x0000000E,
    RG16Uint = 0x0000000F,
    RG16Sint = 0x00000010,
    RG16Float = 0x00000011,
    RGBA8Unorm = 0x00000012,
    RGBA8UnormSrgb = 0x00000013,
    RGBA8Snorm = 0x00000014,
    RGBA8Uint = 0x00000015,
    RGBA8Sint = 0x00000016,
    BGRA8Unorm = 0x00000017,
    BGRA8UnormSrgb = 0x00000018,
    RGB10A2Unorm = 0x00000019,
    RG11B10Ufloat = 0x0000001A,
    RGB9E5Ufloat = 0x0000001B,
    RG32Float = 0x0000001C,
    RG32Uint = 0x0000001D,
    RG32Sint = 0x0000001E,
    RGBA16Uint = 0x0000001F,
    RGBA16Sint = 0x00000020,
    RGBA16Float = 0x00000021,
    RGBA32Float = 0x00000022,
    RGBA32Uint = 0x00000023,
    RGBA32Sint = 0x00000024,
    Stencil8 = 0x00000025,
    Depth16Unorm = 0x00000026,
    Depth24Plus = 0x00000027,
    Depth24PlusStencil8 = 0x00000028,
    Depth32Float = 0x00000029,
    Depth32FloatStencil8 = 0x0000002A,
    BC1RGBAUnorm = 0x0000002B,
    BC1RGBAUnormSrgb = 0x0000002C,
    BC2RGBAUnorm = 0x0000002D,
    BC2RGBAUnormSrgb = 0x0000002E,
    BC3RGBAUnorm = 0x0000002F,
    BC3RGBAUnormSrgb = 0x00000030,
    BC4RUnorm = 0x00000031,
    BC4RSnorm = 0x00000032,
    BC5RGUnorm = 0x00000033,
    BC5RGSnorm = 0x00000034,
    BC6HRGBUfloat = 0x00000035,
    BC6HRGBFloat = 0x00000036,
    BC7RGBAUnorm = 0x00000037,
    BC7RGBAUnormSrgb = 0x00000038,
    ETC2RGB8Unorm = 0x00000039,
    ETC2RGB8UnormSrgb = 0x0000003A,
    ETC2RGB8A1Unorm = 0x0000003B,
    ETC2RGB8A1UnormSrgb = 0x0000003C,
    ETC2RGBA8Unorm = 0x0000003D,
    ETC2RGBA8UnormSrgb = 0x0000003E,
    EACR11Unorm = 0x0000003F,
    EACR11Snorm = 0x00000040,
    EACRG11Unorm = 0x00000041,
    EACRG11Snorm = 0x00000042,
    ASTC4x4Unorm = 0x00000043,
    ASTC4x4UnormSrgb = 0x00000044,
    ASTC5x4Unorm = 0x00000045,
    ASTC5x4UnormSrgb = 0x00000046,
    ASTC5x5Unorm = 0x00000047,
    ASTC5x5UnormSrgb = 0x00000048,
    ASTC6x5Unorm = 0x00000049,
    ASTC6x5UnormSrgb = 0x0000004A,
    ASTC6x6Unorm = 0x0000004B,
    ASTC6x6UnormSrgb = 0x0000004C,
    ASTC8x5Unorm = 0x0000004D,
    ASTC8x5UnormSrgb = 0x0000004E,
    ASTC8x6Unorm = 0x0000004F,
    ASTC8x6UnormSrgb = 0x00000050,
    ASTC8x8Unorm = 0x00000051,
    ASTC8x8UnormSrgb = 0x00000052,
    ASTC10x5Unorm = 0x00000053,
    ASTC10x5UnormSrgb = 0x00000054,
    ASTC10x6Unorm = 0x00000055,
    ASTC10x6UnormSrgb = 0x00000056,
    ASTC10x8Unorm = 0x00000057,
    ASTC10x8UnormSrgb = 0x00000058,
    ASTC10x10Unorm = 0x00000059,
    ASTC10x10UnormSrgb = 0x0000005A,
    ASTC12x10Unorm = 0x0000005B,
    ASTC12x10UnormSrgb = 0x0000005C,
    ASTC12x12Unorm = 0x0000005D,
    ASTC12x12UnormSrgb = 0x0000005E,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureSampleType
{
    Undefined = 0x00000000,
    Float = 0x00000001,
    UnfilterableFloat = 0x00000002,
    Depth = 0x00000003,
    Sint = 0x00000004,
    Uint = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureViewDimension
{
    Undefined = 0x00000000,
    D1 = 0x00000001,
    D2 = 0x00000002,
    D2Array = 0x00000003,
    Cube = 0x00000004,
    CubeArray = 0x00000005,
    D3 = 0x00000006,
    Force32 = 0x7FFFFFFF
}

enum WGPUVertexFormat
{
    Undefined = 0x00000000,
    Uint8x2 = 0x00000001,
    Uint8x4 = 0x00000002,
    Sint8x2 = 0x00000003,
    Sint8x4 = 0x00000004,
    Unorm8x2 = 0x00000005,
    Unorm8x4 = 0x00000006,
    Snorm8x2 = 0x00000007,
    Snorm8x4 = 0x00000008,
    Uint16x2 = 0x00000009,
    Uint16x4 = 0x0000000A,
    Sint16x2 = 0x0000000B,
    Sint16x4 = 0x0000000C,
    Unorm16x2 = 0x0000000D,
    Unorm16x4 = 0x0000000E,
    Snorm16x2 = 0x0000000F,
    Snorm16x4 = 0x00000010,
    Float16x2 = 0x00000011,
    Float16x4 = 0x00000012,
    Float32 = 0x00000013,
    Float32x2 = 0x00000014,
    Float32x3 = 0x00000015,
    Float32x4 = 0x00000016,
    Uint32 = 0x00000017,
    Uint32x2 = 0x00000018,
    Uint32x3 = 0x00000019,
    Uint32x4 = 0x0000001A,
    Sint32 = 0x0000001B,
    Sint32x2 = 0x0000001C,
    Sint32x3 = 0x0000001D,
    Sint32x4 = 0x0000001E,
    Force32 = 0x7FFFFFFF
}

enum WGPUVertexStepMode
{
    Vertex = 0x00000000,
    Instance = 0x00000001,
    VertexBufferNotUsed = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUBufferUsage
{
    None = 0x00000000,
    MapRead = 0x00000001,
    MapWrite = 0x00000002,
    CopySrc = 0x00000004,
    CopyDst = 0x00000008,
    Index = 0x00000010,
    Vertex = 0x00000020,
    Uniform = 0x00000040,
    Storage = 0x00000080,
    Indirect = 0x00000100,
    QueryResolve = 0x00000200,
    Force32 = 0x7FFFFFFF
}

alias WGPUBufferUsageFlags = WGPUFlags;

enum WGPUColorWriteMask
{
    None = 0x00000000,
    Red = 0x00000001,
    Green = 0x00000002,
    Blue = 0x00000004,
    Alpha = 0x00000008,
    All = 0x0000000F,
    Force32 = 0x7FFFFFFF
}

alias WGPUColorWriteMaskFlags = WGPUFlags;

enum WGPUMapMode
{
    None = 0x00000000,
    Read = 0x00000001,
    Write = 0x00000002,
    Force32 = 0x7FFFFFFF
}

alias WGPUMapModeFlags = WGPUFlags;

enum WGPUShaderStage
{
    None = 0x00000000,
    Vertex = 0x00000001,
    Fragment = 0x00000002,
    Compute = 0x00000004,
    Force32 = 0x7FFFFFFF
}

alias WGPUShaderStageFlags = WGPUFlags;

enum WGPUTextureUsage
{
    None = 0x00000000,
    CopySrc = 0x00000001,
    CopyDst = 0x00000002,
    TextureBinding = 0x00000004,
    StorageBinding = 0x00000008,
    RenderAttachment = 0x00000010,
    Force32 = 0x7FFFFFFF
}

alias WGPUTextureUsageFlags = WGPUFlags;

struct WGPUChainedStruct
{
    const(WGPUChainedStruct)* next;
    WGPUSType sType;
}

struct WGPUChainedStructOut
{
    WGPUChainedStructOut* next;
    WGPUSType sType;
}

struct WGPUAdapterProperties
{
    WGPUChainedStructOut* nextInChain;
    uint vendorID;
    const(char)* vendorName;
    const(char)* architecture;
    uint deviceID;
    const(char)* name;
    const(char)* driverDescription;
    WGPUAdapterType adapterType;
    WGPUBackendType backendType;
}

struct WGPUBindGroupEntry
{
    const(WGPUChainedStruct)* nextInChain;
    uint binding;
    WGPUBuffer buffer; // nullable
    ulong offset;
    ulong size;
    WGPUSampler sampler; // nullable
    WGPUTextureView textureView; // nullable
}

struct WGPUBlendComponent
{
    WGPUBlendOperation operation;
    WGPUBlendFactor srcFactor;
    WGPUBlendFactor dstFactor;
}

struct WGPUBufferBindingLayout
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUBufferBindingType type;
    bool hasDynamicOffset;
    ulong minBindingSize;
}

struct WGPUBufferDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    WGPUBufferUsageFlags usage;
    ulong size;
    bool mappedAtCreation;
}

struct WGPUColor
{
    double r;
    double g;
    double b;
    double a;
}

struct WGPUCommandBufferDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
}

struct WGPUCommandEncoderDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
}

struct WGPUCompilationMessage
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* message; // nullable
    WGPUCompilationMessageType type;
    ulong lineNum;
    ulong linePos;
    ulong offset;
    ulong length;
    ulong utf16LinePos;
    ulong utf16Offset;
    ulong utf16Length;
}

struct WGPUComputePassTimestampWrite
{
    WGPUQuerySet querySet;
    uint queryIndex;
    WGPUComputePassTimestampLocation location;
}

struct WGPUConstantEntry
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* key;
    double value;
}

struct WGPUExtent3D
{
    uint width;
    uint height;
    uint depthOrArrayLayers;
}

struct WGPUInstanceDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
}

/**
 * Default values as per https://www.w3.org/TR/webgpu/#limits
 */
struct WGPULimits
{
    uint maxTextureDimension1D = 8192;
    uint maxTextureDimension2D = 8192;
    uint maxTextureDimension3D = 2048;
    uint maxTextureArrayLayers = 256;
    uint maxBindGroups = 4;
    uint maxBindingsPerBindGroup = 640;
    uint maxDynamicUniformBuffersPerPipelineLayout = 8;
    uint maxDynamicStorageBuffersPerPipelineLayout = 4;
    uint maxSampledTexturesPerShaderStage = 16;
    uint maxSamplersPerShaderStage = 16;
    uint maxStorageBuffersPerShaderStage = 8;
    uint maxStorageTexturesPerShaderStage = 4;
    uint maxUniformBuffersPerShaderStage = 12;
    ulong maxUniformBufferBindingSize = 65536;
    ulong maxStorageBufferBindingSize = 134217728;
    uint minUniformBufferOffsetAlignment = 256;
    uint minStorageBufferOffsetAlignment = 256;
    uint maxVertexBuffers = 8;
    ulong maxBufferSize = 268435456;
    uint maxVertexAttributes = 16;
    uint maxVertexBufferArrayStride = 2048;
    uint maxInterStageShaderComponents = 60;
    uint maxInterStageShaderVariables = 16;
    uint maxColorAttachments = 8;
    uint maxColorAttachmentBytesPerSample = 32;
    uint maxComputeWorkgroupStorageSize = 16384;
    uint maxComputeInvocationsPerWorkgroup = 256;
    uint maxComputeWorkgroupSizeX = 256;
    uint maxComputeWorkgroupSizeY = 256;
    uint maxComputeWorkgroupSizeZ = 64;
    uint maxComputeWorkgroupsPerDimension = 65535;
}

struct WGPUMultisampleState
{
    const(WGPUChainedStruct)* nextInChain;
    uint count;
    uint mask;
    bool alphaToCoverageEnabled;
}

struct WGPUOrigin3D
{
    uint x;
    uint y;
    uint z;
}

struct WGPUPipelineLayoutDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    uint bindGroupLayoutCount;
    const(WGPUBindGroupLayout)* bindGroupLayouts;
}

// Can be chained in WGPUPrimitiveState
struct WGPUPrimitiveDepthClipControl
{
    WGPUChainedStruct chain;
    bool unclippedDepth;
}

struct WGPUPrimitiveState
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUPrimitiveTopology topology;
    WGPUIndexFormat stripIndexFormat;
    WGPUFrontFace frontFace;
    WGPUCullMode cullMode;
}

struct WGPUQuerySetDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    WGPUQueryType type;
    uint count;
    const(WGPUPipelineStatisticName)* pipelineStatistics;
    uint pipelineStatisticsCount;
}

struct WGPUQueueDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
}

struct WGPURenderBundleDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
}

struct WGPURenderBundleEncoderDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    uint colorFormatsCount;
    const(WGPUTextureFormat)* colorFormats;
    WGPUTextureFormat depthStencilFormat;
    uint sampleCount;
    bool depthReadOnly;
    bool stencilReadOnly;
}

struct WGPURenderPassDepthStencilAttachment
{
    WGPUTextureView view;
    WGPULoadOp depthLoadOp;
    WGPUStoreOp depthStoreOp;
    float depthClearValue;
    bool depthReadOnly;
    WGPULoadOp stencilLoadOp;
    WGPUStoreOp stencilStoreOp;
    uint stencilClearValue;
    bool stencilReadOnly;
}

// Can be chained in WGPURenderPassDescriptor
struct WGPURenderPassDescriptorMaxDrawCount
{
    WGPUChainedStruct chain;
    ulong maxDrawCount;
}

struct WGPURenderPassTimestampWrite
{
    WGPUQuerySet querySet;
    uint queryIndex;
    WGPURenderPassTimestampLocation location;
}

struct WGPURequestAdapterOptions
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUSurface compatibleSurface; // nullable
    WGPUPowerPreference powerPreference;
    bool forceFallbackAdapter;
}

struct WGPUSamplerBindingLayout
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUSamplerBindingType type;
}

struct WGPUSamplerDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    WGPUAddressMode addressModeU;
    WGPUAddressMode addressModeV;
    WGPUAddressMode addressModeW;
    WGPUFilterMode magFilter;
    WGPUFilterMode minFilter;
    WGPUMipmapFilterMode mipmapFilter;
    float lodMinClamp;
    float lodMaxClamp;
    WGPUCompareFunction compare;
    ushort maxAnisotropy;
}

struct WGPUShaderModuleCompilationHint
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* entryPoint;
    WGPUPipelineLayout layout;
}

// Can be chained in WGPUShaderModuleDescriptor
struct WGPUShaderModuleSPIRVDescriptor
{
    WGPUChainedStruct chain;
    uint codeSize;
    const(uint)* code;
}

// Can be chained in WGPUShaderModuleDescriptor
struct WGPUShaderModuleWGSLDescriptor
{
    WGPUChainedStruct chain;
    const(char)* code;
}

struct WGPUStencilFaceState
{
    WGPUCompareFunction compare;
    WGPUStencilOperation failOp;
    WGPUStencilOperation depthFailOp;
    WGPUStencilOperation passOp;
}

struct WGPUStorageTextureBindingLayout
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStorageTextureAccess access;
    WGPUTextureFormat format;
    WGPUTextureViewDimension viewDimension;
}

struct WGPUSurfaceDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
}

// Can be chained in WGPUSurfaceDescriptor
struct WGPUSurfaceDescriptorFromAndroidNativeWindow
{
    WGPUChainedStruct chain;
    void* window;
}

// Can be chained in WGPUSurfaceDescriptor
struct WGPUSurfaceDescriptorFromCanvasHTMLSelector
{
    WGPUChainedStruct chain;
    const(char)* selector;
}

// Can be chained in WGPUSurfaceDescriptor
struct WGPUSurfaceDescriptorFromMetalLayer
{
    WGPUChainedStruct chain;
    void* layer;
}

// Can be chained in WGPUSurfaceDescriptor
struct WGPUSurfaceDescriptorFromWaylandSurface
{
    WGPUChainedStruct chain;
    void* display;
    void* surface;
}

// Can be chained in WGPUSurfaceDescriptor
struct WGPUSurfaceDescriptorFromWindowsHWND
{
    WGPUChainedStruct chain;
    void* hinstance;
    void* hwnd;
}

// Can be chained in WGPUSurfaceDescriptor
struct WGPUSurfaceDescriptorFromXcbWindow
{
    WGPUChainedStruct chain;
    void* connection;
    uint window;
}

// Can be chained in WGPUSurfaceDescriptor
struct WGPUSurfaceDescriptorFromXlibWindow
{
    WGPUChainedStruct chain;
    void* display;
    uint window;
}

struct WGPUSwapChainDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    WGPUTextureUsageFlags usage;
    WGPUTextureFormat format;
    uint width;
    uint height;
    WGPUPresentMode presentMode;
}

struct WGPUTextureBindingLayout
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUTextureSampleType sampleType;
    WGPUTextureViewDimension viewDimension;
    bool multisampled;
}

struct WGPUTextureDataLayout
{
    const(WGPUChainedStruct)* nextInChain;
    ulong offset;
    uint bytesPerRow;
    uint rowsPerImage;
}

struct WGPUTextureViewDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    WGPUTextureFormat format;
    WGPUTextureViewDimension dimension;
    uint baseMipLevel;
    uint mipLevelCount;
    uint baseArrayLayer;
    uint arrayLayerCount;
    WGPUTextureAspect aspect;
}

struct WGPUVertexAttribute
{
    WGPUVertexFormat format;
    ulong offset;
    uint shaderLocation;
}

struct WGPUBindGroupDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    WGPUBindGroupLayout layout;
    uint entryCount;
    const(WGPUBindGroupEntry)* entries;
}

struct WGPUBindGroupLayoutEntry
{
    const(WGPUChainedStruct)* nextInChain;
    uint binding;
    WGPUShaderStageFlags visibility;
    WGPUBufferBindingLayout buffer;
    WGPUSamplerBindingLayout sampler;
    WGPUTextureBindingLayout texture;
    WGPUStorageTextureBindingLayout storageTexture;
}

struct WGPUBlendState
{
    WGPUBlendComponent color;
    WGPUBlendComponent alpha;
}

struct WGPUCompilationInfo
{
    const(WGPUChainedStruct)* nextInChain;
    uint messageCount;
    const(WGPUCompilationMessage)* messages;
}

struct WGPUComputePassDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    uint timestampWriteCount;
    const(WGPUComputePassTimestampWrite)* timestampWrites;
}

struct WGPUDepthStencilState
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUTextureFormat format;
    bool depthWriteEnabled;
    WGPUCompareFunction depthCompare;
    WGPUStencilFaceState stencilFront;
    WGPUStencilFaceState stencilBack;
    uint stencilReadMask;
    uint stencilWriteMask;
    int depthBias;
    float depthBiasSlopeScale;
    float depthBiasClamp;
}

struct WGPUImageCopyBuffer
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUTextureDataLayout layout;
    WGPUBuffer buffer;
}

struct WGPUImageCopyTexture
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUTexture texture;
    uint mipLevel;
    WGPUOrigin3D origin;
    WGPUTextureAspect aspect;
}

struct WGPUProgrammableStageDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUShaderModule module_;
    const(char)* entryPoint;
    uint constantCount;
    const(WGPUConstantEntry)* constants;
}

struct WGPURenderPassColorAttachment
{
    WGPUTextureView view; // nullable
    WGPUTextureView resolveTarget; // nullable
    WGPULoadOp loadOp;
    WGPUStoreOp storeOp;
    WGPUColor clearValue;
}

struct WGPURequiredLimits
{
    const(WGPUChainedStruct)* nextInChain;
    WGPULimits limits;
}

struct WGPUShaderModuleDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    uint hintCount;
    const(WGPUShaderModuleCompilationHint)* hints;
}

struct WGPUSupportedLimits
{
    WGPUChainedStructOut* nextInChain;
    WGPULimits limits;
}

struct WGPUTextureDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    WGPUTextureUsageFlags usage;
    WGPUTextureDimension dimension;
    WGPUExtent3D size;
    WGPUTextureFormat format;
    uint mipLevelCount;
    uint sampleCount;
    uint viewFormatCount;
    const(WGPUTextureFormat)* viewFormats;
}

struct WGPUVertexBufferLayout
{
    ulong arrayStride;
    WGPUVertexStepMode stepMode;
    uint attributeCount;
    const(WGPUVertexAttribute)* attributes;
}

struct WGPUBindGroupLayoutDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    uint entryCount;
    const(WGPUBindGroupLayoutEntry)* entries;
}

struct WGPUColorTargetState
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUTextureFormat format;
    const(WGPUBlendState)* blend; // nullable
    WGPUColorWriteMaskFlags writeMask;
}

struct WGPUComputePipelineDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    WGPUPipelineLayout layout; // nullable
    WGPUProgrammableStageDescriptor compute;
}

struct WGPUDeviceDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    uint requiredFeaturesCount;
    const(WGPUFeatureName)* requiredFeatures;
    const(WGPURequiredLimits)* requiredLimits; // nullable
    WGPUQueueDescriptor defaultQueue;
}

struct WGPURenderPassDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    uint colorAttachmentCount;
    const(WGPURenderPassColorAttachment)* colorAttachments;
    const(WGPURenderPassDepthStencilAttachment)* depthStencilAttachment; // nullable
    WGPUQuerySet occlusionQuerySet; // nullable
    uint timestampWriteCount;
    const(WGPURenderPassTimestampWrite)* timestampWrites;
}

struct WGPUVertexState
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUShaderModule module_;
    const(char)* entryPoint;
    uint constantCount;
    const(WGPUConstantEntry)* constants;
    uint bufferCount;
    const(WGPUVertexBufferLayout)* buffers;
}

struct WGPUFragmentState
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUShaderModule module_;
    const(char)* entryPoint;
    uint constantCount;
    const(WGPUConstantEntry)* constants;
    uint targetCount;
    const(WGPUColorTargetState)* targets;
}

struct WGPURenderPipelineDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    const(char)* label; // nullable
    WGPUPipelineLayout layout; // nullable
    WGPUVertexState vertex;
    WGPUPrimitiveState primitive;
    const(WGPUDepthStencilState)* depthStencil; // nullable
    WGPUMultisampleState multisample;
    const(WGPUFragmentState)* fragment; // nullable
}

alias WGPUBufferMapCallback = extern(C) void function (WGPUBufferMapAsyncStatus status, void* userdata);
alias WGPUCompilationInfoCallback = extern(C) void function (WGPUCompilationInfoRequestStatus status, const(WGPUCompilationInfo)* compilationInfo, void* userdata);
alias WGPUCreateComputePipelineAsyncCallback = extern(C) void function (WGPUCreatePipelineAsyncStatus status, WGPUComputePipeline pipeline, const(char)* message, void* userdata);
alias WGPUCreateRenderPipelineAsyncCallback = extern(C) void function (WGPUCreatePipelineAsyncStatus status, WGPURenderPipeline pipeline, const(char)* message, void* userdata);
alias WGPUDeviceLostCallback = extern(C) void function (WGPUDeviceLostReason reason, const(char)* message, void* userdata);
alias WGPUErrorCallback = extern(C) void function (WGPUErrorType type, const(char)* message, void* userdata);
alias WGPUProc = extern(C) void function ();
alias WGPUQueueWorkDoneCallback = extern(C) void function (WGPUQueueWorkDoneStatus status, void* userdata);
alias WGPURequestAdapterCallback = extern(C) void function (WGPURequestAdapterStatus status, WGPUAdapter adapter, const(char)* message, void* userdata);
alias WGPURequestDeviceCallback = extern(C) void function (WGPURequestDeviceStatus status, WGPUDevice device, const(char)* message, void* userdata);

alias WGPUProcCreateInstance = extern(C) WGPUInstance* function (const(WGPUInstanceDescriptor)* descriptor);
alias WGPUProcGetProcAddress = extern(C) void function (WGPUDevice device, const(char)* procName) function (WGPUDevice device, const(char)* procName);

// Procs of Adapter
alias WGPUProcAdapterEnumerateFeatures = extern(C) size_t function (WGPUAdapter adapter, WGPUFeatureName* features);
alias WGPUProcAdapterGetLimits = extern(C) bool function (WGPUAdapter adapter, WGPUSupportedLimits* limits);
alias WGPUProcAdapterGetProperties = extern(C) void function (WGPUAdapter adapter, WGPUAdapterProperties* properties);
alias WGPUProcAdapterHasFeature = extern(C) bool function (WGPUAdapter adapter, WGPUFeatureName feature);
/* nullable */
alias WGPUProcAdapterRequestDevice = extern(C) void function (WGPUAdapter adapter, const(WGPUDeviceDescriptor)* descriptor, WGPURequestDeviceCallback callback, void* userdata);

// Procs of BindGroup
alias WGPUProcBindGroupSetLabel = extern(C) void function (WGPUBindGroup bindGroup, const(char)* label);

// Procs of BindGroupLayout
alias WGPUProcBindGroupLayoutSetLabel = extern(C) void function (WGPUBindGroupLayout bindGroupLayout, const(char)* label);

// Procs of Buffer
alias WGPUProcBufferDestroy = extern(C) void function (WGPUBuffer buffer);
alias WGPUProcBufferGetConstMappedRange = extern(C) const(void)* function (WGPUBuffer buffer, size_t offset, size_t size);
alias WGPUProcBufferGetMapState = extern(C) WGPUBufferMapState function (WGPUBuffer buffer);
alias WGPUProcBufferGetMappedRange = extern(C) void* function (WGPUBuffer buffer, size_t offset, size_t size);
alias WGPUProcBufferGetSize = extern(C) size_t function (WGPUBuffer buffer);
alias WGPUProcBufferGetUsage = extern(C) WGPUBufferUsage function (WGPUBuffer buffer);
alias WGPUProcBufferMapAsync = extern(C) void function (WGPUBuffer buffer, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void* userdata);
alias WGPUProcBufferSetLabel = extern(C) void function (WGPUBuffer buffer, const(char)* label);
alias WGPUProcBufferUnmap = extern(C) void function (WGPUBuffer buffer);

// Procs of CommandBuffer
alias WGPUProcCommandBufferSetLabel = extern(C) void function (WGPUCommandBuffer commandBuffer, const(char)* label);

// Procs of CommandEncoder
/* nullable */
alias WGPUProcCommandEncoderBeginComputePass = extern(C) WGPUComputePassEncoder* function (WGPUCommandEncoder commandEncoder, const(WGPUComputePassDescriptor)* descriptor);
alias WGPUProcCommandEncoderBeginRenderPass = extern(C) WGPURenderPassEncoder* function (WGPUCommandEncoder commandEncoder, const(WGPURenderPassDescriptor)* descriptor);
alias WGPUProcCommandEncoderClearBuffer = extern(C) void function (WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, ulong offset, ulong size);
alias WGPUProcCommandEncoderCopyBufferToBuffer = extern(C) void function (WGPUCommandEncoder commandEncoder, WGPUBuffer source, ulong sourceOffset, WGPUBuffer destination, ulong destinationOffset, ulong size);
alias WGPUProcCommandEncoderCopyBufferToTexture = extern(C) void function (WGPUCommandEncoder commandEncoder, const(WGPUImageCopyBuffer)* source, const(WGPUImageCopyTexture)* destination, const(WGPUExtent3D)* copySize);
alias WGPUProcCommandEncoderCopyTextureToBuffer = extern(C) void function (WGPUCommandEncoder commandEncoder, const(WGPUImageCopyTexture)* source, const(WGPUImageCopyBuffer)* destination, const(WGPUExtent3D)* copySize);
alias WGPUProcCommandEncoderCopyTextureToTexture = extern(C) void function (WGPUCommandEncoder commandEncoder, const(WGPUImageCopyTexture)* source, const(WGPUImageCopyTexture)* destination, const(WGPUExtent3D)* copySize);
/* nullable */
alias WGPUProcCommandEncoderFinish = extern(C) WGPUCommandBuffer* function (WGPUCommandEncoder commandEncoder, const(WGPUCommandBufferDescriptor)* descriptor);
alias WGPUProcCommandEncoderInsertDebugMarker = extern(C) void function (WGPUCommandEncoder commandEncoder, const(char)* markerLabel);
alias WGPUProcCommandEncoderPopDebugGroup = extern(C) void function (WGPUCommandEncoder commandEncoder);
alias WGPUProcCommandEncoderPushDebugGroup = extern(C) void function (WGPUCommandEncoder commandEncoder, const(char)* groupLabel);
alias WGPUProcCommandEncoderResolveQuerySet = extern(C) void function (WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint firstQuery, uint queryCount, WGPUBuffer destination, ulong destinationOffset);
alias WGPUProcCommandEncoderSetLabel = extern(C) void function (WGPUCommandEncoder commandEncoder, const(char)* label);
alias WGPUProcCommandEncoderWriteTimestamp = extern(C) void function (WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint queryIndex);

// Procs of ComputePassEncoder
alias WGPUProcComputePassEncoderBeginPipelineStatisticsQuery = extern(C) void function (WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint queryIndex);
alias WGPUProcComputePassEncoderDispatchWorkgroups = extern(C) void function (WGPUComputePassEncoder computePassEncoder, uint workgroupCountX, uint workgroupCountY, uint workgroupCountZ);
alias WGPUProcComputePassEncoderDispatchWorkgroupsIndirect = extern(C) void function (WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcComputePassEncoderEnd = extern(C) void function (WGPUComputePassEncoder computePassEncoder);
alias WGPUProcComputePassEncoderEndPipelineStatisticsQuery = extern(C) void function (WGPUComputePassEncoder computePassEncoder);
alias WGPUProcComputePassEncoderInsertDebugMarker = extern(C) void function (WGPUComputePassEncoder computePassEncoder, const(char)* markerLabel);
alias WGPUProcComputePassEncoderPopDebugGroup = extern(C) void function (WGPUComputePassEncoder computePassEncoder);
alias WGPUProcComputePassEncoderPushDebugGroup = extern(C) void function (WGPUComputePassEncoder computePassEncoder, const(char)* groupLabel);
alias WGPUProcComputePassEncoderSetBindGroup = extern(C) void function (WGPUComputePassEncoder computePassEncoder, uint groupIndex, WGPUBindGroup group, uint dynamicOffsetCount, const(uint)* dynamicOffsets);
alias WGPUProcComputePassEncoderSetLabel = extern(C) void function (WGPUComputePassEncoder computePassEncoder, const(char)* label);
alias WGPUProcComputePassEncoderSetPipeline = extern(C) void function (WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline);

// Procs of ComputePipeline
alias WGPUProcComputePipelineGetBindGroupLayout = extern(C) WGPUBindGroupLayout* function (WGPUComputePipeline computePipeline, uint groupIndex);
alias WGPUProcComputePipelineSetLabel = extern(C) void function (WGPUComputePipeline computePipeline, const(char)* label);

// Procs of Device
alias WGPUProcDeviceCreateBindGroup = extern(C) WGPUBindGroup* function (WGPUDevice device, const(WGPUBindGroupDescriptor)* descriptor);
alias WGPUProcDeviceCreateBindGroupLayout = extern(C) WGPUBindGroupLayout* function (WGPUDevice device, const(WGPUBindGroupLayoutDescriptor)* descriptor);
alias WGPUProcDeviceCreateBuffer = extern(C) WGPUBuffer* function (WGPUDevice device, const(WGPUBufferDescriptor)* descriptor);
/* nullable */
alias WGPUProcDeviceCreateCommandEncoder = extern(C) WGPUCommandEncoder* function (WGPUDevice device, const(WGPUCommandEncoderDescriptor)* descriptor);
alias WGPUProcDeviceCreateComputePipeline = extern(C) WGPUComputePipeline* function (WGPUDevice device, const(WGPUComputePipelineDescriptor)* descriptor);
alias WGPUProcDeviceCreateComputePipelineAsync = extern(C) void function (WGPUDevice device, const(WGPUComputePipelineDescriptor)* descriptor, WGPUCreateComputePipelineAsyncCallback callback, void* userdata);
alias WGPUProcDeviceCreatePipelineLayout = extern(C) WGPUPipelineLayout* function (WGPUDevice device, const(WGPUPipelineLayoutDescriptor)* descriptor);
alias WGPUProcDeviceCreateQuerySet = extern(C) WGPUQuerySet* function (WGPUDevice device, const(WGPUQuerySetDescriptor)* descriptor);
alias WGPUProcDeviceCreateRenderBundleEncoder = extern(C) WGPURenderBundleEncoder* function (WGPUDevice device, const(WGPURenderBundleEncoderDescriptor)* descriptor);
alias WGPUProcDeviceCreateRenderPipeline = extern(C) WGPURenderPipeline* function (WGPUDevice device, const(WGPURenderPipelineDescriptor)* descriptor);
alias WGPUProcDeviceCreateRenderPipelineAsync = extern(C) void function (WGPUDevice device, const(WGPURenderPipelineDescriptor)* descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void* userdata);
/* nullable */
alias WGPUProcDeviceCreateSampler = extern(C) WGPUSampler* function (WGPUDevice device, const(WGPUSamplerDescriptor)* descriptor);
alias WGPUProcDeviceCreateShaderModule = extern(C) WGPUShaderModule* function (WGPUDevice device, const(WGPUShaderModuleDescriptor)* descriptor);
alias WGPUProcDeviceCreateSwapChain = extern(C) WGPUSwapChain* function (WGPUDevice device, WGPUSurface surface, const(WGPUSwapChainDescriptor)* descriptor);
alias WGPUProcDeviceCreateTexture = extern(C) WGPUTexture* function (WGPUDevice device, const(WGPUTextureDescriptor)* descriptor);
alias WGPUProcDeviceDestroy = extern(C) void function (WGPUDevice device);
alias WGPUProcDeviceEnumerateFeatures = extern(C) size_t function (WGPUDevice device, WGPUFeatureName* features);
alias WGPUProcDeviceGetLimits = extern(C) bool function (WGPUDevice device, WGPUSupportedLimits* limits);
alias WGPUProcDeviceGetQueue = extern(C) WGPUQueue* function (WGPUDevice device);
alias WGPUProcDeviceHasFeature = extern(C) bool function (WGPUDevice device, WGPUFeatureName feature);
alias WGPUProcDevicePopErrorScope = extern(C) bool function (WGPUDevice device, WGPUErrorCallback callback, void* userdata);
alias WGPUProcDevicePushErrorScope = extern(C) void function (WGPUDevice device, WGPUErrorFilter filter);
alias WGPUProcDeviceSetDeviceLostCallback = extern(C) void function (WGPUDevice device, WGPUDeviceLostCallback callback, void* userdata);
alias WGPUProcDeviceSetLabel = extern(C) void function (WGPUDevice device, const(char)* label);
alias WGPUProcDeviceSetUncapturedErrorCallback = extern(C) void function (WGPUDevice device, WGPUErrorCallback callback, void* userdata);

// Procs of Instance
alias WGPUProcInstanceCreateSurface = extern(C) WGPUSurface* function (WGPUInstance instance, const(WGPUSurfaceDescriptor)* descriptor);
alias WGPUProcInstanceProcessEvents = extern(C) void function (WGPUInstance instance);
/* nullable */
alias WGPUProcInstanceRequestAdapter = extern(C) void function (WGPUInstance instance, const(WGPURequestAdapterOptions)* options, WGPURequestAdapterCallback callback, void* userdata);

// Procs of PipelineLayout
alias WGPUProcPipelineLayoutSetLabel = extern(C) void function (WGPUPipelineLayout pipelineLayout, const(char)* label);

// Procs of QuerySet
alias WGPUProcQuerySetDestroy = extern(C) void function (WGPUQuerySet querySet);
alias WGPUProcQuerySetGetCount = extern(C) uint function (WGPUQuerySet querySet);
alias WGPUProcQuerySetGetType = extern(C) WGPUQueryType function (WGPUQuerySet querySet);
alias WGPUProcQuerySetSetLabel = extern(C) void function (WGPUQuerySet querySet, const(char)* label);

// Procs of Queue
alias WGPUProcQueueOnSubmittedWorkDone = extern(C) void function (WGPUQueue queue, WGPUQueueWorkDoneCallback callback, void* userdata);
alias WGPUProcQueueSetLabel = extern(C) void function (WGPUQueue queue, const(char)* label);
alias WGPUProcQueueSubmit = extern(C) void function (WGPUQueue queue, uint commandCount, const(WGPUCommandBuffer)* commands);
alias WGPUProcQueueWriteBuffer = extern(C) void function (WGPUQueue queue, WGPUBuffer buffer, ulong bufferOffset, const(void)* data, size_t size);
alias WGPUProcQueueWriteTexture = extern(C) void function (WGPUQueue queue, const(WGPUImageCopyTexture)* destination, const(void)* data, size_t dataSize, const(WGPUTextureDataLayout)* dataLayout, const(WGPUExtent3D)* writeSize);

// Procs of RenderBundleEncoder
alias WGPUProcRenderBundleEncoderDraw = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
alias WGPUProcRenderBundleEncoderDrawIndexed = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, uint indexCount, uint instanceCount, uint firstIndex, int baseVertex, uint firstInstance);
alias WGPUProcRenderBundleEncoderDrawIndexedIndirect = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderBundleEncoderDrawIndirect = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
/* nullable */
alias WGPUProcRenderBundleEncoderFinish = extern(C) WGPURenderBundle* function (WGPURenderBundleEncoder renderBundleEncoder, const(WGPURenderBundleDescriptor)* descriptor);
alias WGPUProcRenderBundleEncoderInsertDebugMarker = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, const(char)* markerLabel);
alias WGPUProcRenderBundleEncoderPopDebugGroup = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder);
alias WGPUProcRenderBundleEncoderPushDebugGroup = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, const(char)* groupLabel);
alias WGPUProcRenderBundleEncoderSetBindGroup = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, uint groupIndex, WGPUBindGroup group, uint dynamicOffsetCount, const(uint)* dynamicOffsets);
alias WGPUProcRenderBundleEncoderSetIndexBuffer = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, ulong offset, ulong size);
alias WGPUProcRenderBundleEncoderSetLabel = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, const(char)* label);
alias WGPUProcRenderBundleEncoderSetPipeline = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline);
alias WGPUProcRenderBundleEncoderSetVertexBuffer = extern(C) void function (WGPURenderBundleEncoder renderBundleEncoder, uint slot, WGPUBuffer buffer, ulong offset, ulong size);

// Procs of RenderPassEncoder
alias WGPUProcRenderPassEncoderBeginOcclusionQuery = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, uint queryIndex);
alias WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint queryIndex);
alias WGPUProcRenderPassEncoderDraw = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
alias WGPUProcRenderPassEncoderDrawIndexed = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, uint indexCount, uint instanceCount, uint firstIndex, int baseVertex, uint firstInstance);
alias WGPUProcRenderPassEncoderDrawIndexedIndirect = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderPassEncoderDrawIndirect = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderPassEncoderEnd = extern(C) void function (WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderEndOcclusionQuery = extern(C) void function (WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderEndPipelineStatisticsQuery = extern(C) void function (WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderExecuteBundles = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, uint bundleCount, const(WGPURenderBundle)* bundles);
alias WGPUProcRenderPassEncoderInsertDebugMarker = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, const(char)* markerLabel);
alias WGPUProcRenderPassEncoderPopDebugGroup = extern(C) void function (WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderPushDebugGroup = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, const(char)* groupLabel);
alias WGPUProcRenderPassEncoderSetBindGroup = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, uint groupIndex, WGPUBindGroup group, uint dynamicOffsetCount, const(uint)* dynamicOffsets);
alias WGPUProcRenderPassEncoderSetBlendConstant = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, const(WGPUColor)* color);
alias WGPUProcRenderPassEncoderSetIndexBuffer = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, ulong offset, ulong size);
alias WGPUProcRenderPassEncoderSetLabel = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, const(char)* label);
alias WGPUProcRenderPassEncoderSetPipeline = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline);
alias WGPUProcRenderPassEncoderSetScissorRect = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, uint x, uint y, uint width, uint height);
alias WGPUProcRenderPassEncoderSetStencilReference = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, uint reference);
alias WGPUProcRenderPassEncoderSetVertexBuffer = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, uint slot, WGPUBuffer buffer, ulong offset, ulong size);
alias WGPUProcRenderPassEncoderSetViewport = extern(C) void function (WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);

// Procs of RenderPipeline
alias WGPUProcRenderPipelineGetBindGroupLayout = extern(C) WGPUBindGroupLayout* function (WGPURenderPipeline renderPipeline, uint groupIndex);
alias WGPUProcRenderPipelineSetLabel = extern(C) void function (WGPURenderPipeline renderPipeline, const(char)* label);

// Procs of Sampler
alias WGPUProcSamplerSetLabel = extern(C) void function (WGPUSampler sampler, const(char)* label);

// Procs of ShaderModule
alias WGPUProcShaderModuleGetCompilationInfo = extern(C) void function (WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void* userdata);
alias WGPUProcShaderModuleSetLabel = extern(C) void function (WGPUShaderModule shaderModule, const(char)* label);

// Procs of Surface
alias WGPUProcSurfaceGetPreferredFormat = extern(C) WGPUTextureFormat function (WGPUSurface surface, WGPUAdapter adapter);

// Procs of SwapChain
alias WGPUProcSwapChainGetCurrentTextureView = extern(C) WGPUTextureView* function (WGPUSwapChain swapChain);
alias WGPUProcSwapChainPresent = extern(C) void function (WGPUSwapChain swapChain);

// Procs of Texture
/* nullable */
alias WGPUProcTextureCreateView = extern(C) WGPUTextureView* function (WGPUTexture texture, const(WGPUTextureViewDescriptor)* descriptor);
alias WGPUProcTextureDestroy = extern(C) void function (WGPUTexture texture);
alias WGPUProcTextureGetDepthOrArrayLayers = extern(C) uint function (WGPUTexture texture);
alias WGPUProcTextureGetDimension = extern(C) WGPUTextureDimension function (WGPUTexture texture);
alias WGPUProcTextureGetFormat = extern(C) WGPUTextureFormat function (WGPUTexture texture);
alias WGPUProcTextureGetHeight = extern(C) uint function (WGPUTexture texture);
alias WGPUProcTextureGetMipLevelCount = extern(C) uint function (WGPUTexture texture);
alias WGPUProcTextureGetSampleCount = extern(C) uint function (WGPUTexture texture);
alias WGPUProcTextureGetUsage = extern(C) WGPUTextureUsage function (WGPUTexture texture);
alias WGPUProcTextureGetWidth = extern(C) uint function (WGPUTexture texture);
alias WGPUProcTextureSetLabel = extern(C) void function (WGPUTexture texture, const(char)* label);

// Procs of TextureView
alias WGPUProcTextureViewSetLabel = extern(C) void function (WGPUTextureView textureView, const(char)* label);
